name: auto-release

on:
  push:
  schedule:
    # * is a special character in YAML so you have to quote this string
    - cron:  '15 * * * *'
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - uses: GoogleCloudPlatform/github-actions/setup-gcloud@master
      with:
        version: '281.0.0'
        service_account_email: ${{ secrets.GCP_SA_EMAIL }}
        service_account_key: ${{ secrets.GCP_SA_KEY }}
    - name: Get the latest beacon-chain release
      id: latest-head
      run: |
        gcloud container images list-tags gcr.io/prysmaticlabs/prysm/beacon-chain --filter "tags~latest$" --format=json > list-tags.json
        VERSION_HEAD=$(cat list-tags.json | jq -r '.[]["tags"][] | select(.|contains ("HEAD"))')
        VERSION_DIGEST=$(cat list-tags.json | jq -r '.[].digest')
        echo "::set-output name=VERSION_HEAD::${VERSION_HEAD}"
        echo "::set-output name=VERSION_DIGEST::${VERSION_DIGEST}"
        git ls-remote -t | grep refs/tags/${VERSION_HEAD} && NEW_VERSION=false || NEW_VERSION=true
        echo "::set-output name=NEW_VERSION::${NEW_VERSION}"
        echo "VERSION=@${VERSION_DIGEST}" > .env
        sed -i 's/.*upstreamVersion.*/  "upstreamVersion": "'${VERSION_HEAD}'",/g' dappnode_package.json
    - name: Setup nodejs
      if: steps.latest-head.outputs.NEW_VERSION == 'true'
      uses: actions/setup-node@v1
      with:
        node-version: '10.x'
    - name: dappnodesdk install
      if: steps.latest-head.outputs.NEW_VERSION == 'true'
      run: npm install -g @dappnode/dappnodesdk
    - name: Get next DAppNodePackage release
      if: steps.latest-head.outputs.NEW_VERSION == 'true'
      id: next-release
      run: echo "::set-output name=DNP_VERSION::$(dappnodesdk next patch -p infura)"
    - name: Check and delete if a release already exists
      if: steps.latest-head.outputs.NEW_VERSION == 'true'
      env:
        GITHUB_TOKEN: ${{ secrets.AUTH_TOKEN }}
      run: | 
        RELEASE_ID=$(curl https://api.github.com/repos/${{ github.repository }}/releases/tags/${{ steps.next-release.outputs.DNP_VERSION }} | jq .id ||Â echo "") 
        echo $RELEASE_ID
        if [ ! -z "$RELEASE_ID" ];then
          curl -H "Authorization: token ${GITHUB_TOKEN}" -X DELETE https://api.github.com/repos/${{ github.repository }}/releases/${RELEASE_ID}
        fi
    - name: Docker-Compose Build
      if: steps.latest-head.outputs.NEW_VERSION == 'true'
      run: |
        docker-compose build
    - name: dappnodesdk
      if: steps.latest-head.outputs.NEW_VERSION == 'true'
      id: dappnodesdk-publish
      run: |
        dappnodesdk publish patch --eth_provider ${{ secrets.ETH_PROVIDER }} --ipfs_provider ${{ secrets.IPFS_PROVIDER }} > publish.txt
        echo "::set-output name=RESULT::$(grep "sdk/publish/r=" publish.txt)"
    - name: Create Release
      if: steps.latest-head.outputs.NEW_VERSION == 'true'
      id: create_release
      uses: actions/create-release@latest
      env:
        GITHUB_TOKEN: ${{ secrets.AUTH_TOKEN }} # This token is provided by Actions, you do not need to create your own token
      with:
        release_name: v${{ steps.next-release.outputs.DNP_VERSION }}
        tag_name: ${{ steps.latest-head.outputs.VERSION_HEAD }}
        body: |
          You can execute a transaction to publish this package from the Admin UI with Metamask by following this pre-filled [link](${{ steps.dappnodesdk-publish.outputs.RESULT }})
          Changes in this Release
          - ${{ steps.latest-head.outputs.VERSION_HEAD }}
          - Digest: ${{ steps.latest-head.outputs.VERSION_DIGEST }}
        draft: false
        prerelease: true
    - name: Upload Release .xz file
      if: steps.latest-head.outputs.NEW_VERSION == 'true'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.AUTH_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        asset_path: ./build_${{ steps.next-release.outputs.DNP_VERSION }}/prysm-beacon-chain.public.dappnode.eth_${{ steps.next-release.outputs.DNP_VERSION }}.tar.xz
        asset_name: prysm-beacon-chain.public.dappnode.eth_${{ steps.next-release.outputs.DNP_VERSION }}.tar.xz
        asset_content_type: 'application/octet-stream'
    - name: Upload Release avatar file
      if: steps.latest-head.outputs.NEW_VERSION == 'true'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.AUTH_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        asset_path: ./build_${{ steps.next-release.outputs.DNP_VERSION }}/avatar.png
        asset_name: avatar.png
        asset_content_type: 'application/octet-stream'
    - name: Upload Release dappnode_package.json file
      if: steps.latest-head.outputs.NEW_VERSION == 'true'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.AUTH_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        asset_path: ./build_${{ steps.next-release.outputs.DNP_VERSION }}/dappnode_package.json
        asset_name: dappnode_package.json
        asset_content_type: 'application/octet-stream'
    - name: Upload Release docker-compose.yml file
      if: steps.latest-head.outputs.NEW_VERSION == 'true'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.AUTH_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        asset_path: ./build_${{ steps.next-release.outputs.DNP_VERSION }}/docker-compose.yml
        asset_name: docker-compose.yml
        asset_content_type: 'application/octet-stream'
    - name: Commit changes
      if: steps.latest-head.outputs.NEW_VERSION == 'true'
      run: |
          git config --global user.email "eduadiez@gmail.com"
          git config --global user.name "Eduardo"
          git commit -am "Github action update"
          git push
